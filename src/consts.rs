/// Key and IV sizing
pub const E128_KEY_SIZE_BYTE: usize = 16;
pub const E128_IV_SIZE_BYTE: usize = 8;

// In-memory state sizing
pub const E128_BUF_SIZE_BYTE: usize = 32;
pub const E128_STATE_SIZE_BYTE: usize = 2;

// Initialization for 32-byte buffer
pub const E128_BUF_TAIL_INIT: [u8; 8] = [0x66, 0xe9, 0x4b, 0xd4, 0xef, 0x8a, 0x2c, 0x3b];
pub const E128_STATE_INIT: [u8; 2] = [0x88, 0x4c];

/// Next state constants for 128-bit/16-byte key
pub const K128_1: u8 = 2;
pub const K128_2: u8 = 7;
pub const K128_3: u8 = 16;
pub const K128_4: u8 = 29;
pub const K128_P1: u8 = 6;
pub const K128_P2: u8 = 15;
pub const K128_P3: u8 = 28;
pub const K128_SHIFT: u8 = 31;
pub const K128_INIT_ROUND_NUM: usize = 96;

/// XTime table
pub static XTIME: [u8; 256] = [
    0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e,
    0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e,
    0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e,
    0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e,
    0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e,
    0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe,
    0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde,
    0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe,
    0x1d, 0x1f, 0x19, 0x1b, 0x15, 0x17, 0x11, 0x13, 0x0d, 0x0f, 0x09, 0x0b, 0x05, 0x07, 0x01, 0x03,
    0x3d, 0x3f, 0x39, 0x3b, 0x35, 0x37, 0x31, 0x33, 0x2d, 0x2f, 0x29, 0x2b, 0x25, 0x27, 0x21, 0x23,
    0x5d, 0x5f, 0x59, 0x5b, 0x55, 0x57, 0x51, 0x53, 0x4d, 0x4f, 0x49, 0x4b, 0x45, 0x47, 0x41, 0x43,
    0x7d, 0x7f, 0x79, 0x7b, 0x75, 0x77, 0x71, 0x73, 0x6d, 0x6f, 0x69, 0x6b, 0x65, 0x67, 0x61, 0x63,
    0x9d, 0x9f, 0x99, 0x9b, 0x95, 0x97, 0x91, 0x93, 0x8d, 0x8f, 0x89, 0x8b, 0x85, 0x87, 0x81, 0x83,
    0xbd, 0xbf, 0xb9, 0xbb, 0xb5, 0xb7, 0xb1, 0xb3, 0xad, 0xaf, 0xa9, 0xab, 0xa5, 0xa7, 0xa1, 0xa3,
    0xdd, 0xdf, 0xd9, 0xdb, 0xd5, 0xd7, 0xd1, 0xd3, 0xcd, 0xcf, 0xc9, 0xcb, 0xc5, 0xc7, 0xc1, 0xc3,
    0xfd, 0xff, 0xf9, 0xfb, 0xf5, 0xf7, 0xf1, 0xf3, 0xed, 0xef, 0xe9, 0xeb, 0xe5, 0xe7, 0xe1, 0xe3,
];

/// SBox table
pub static SBOX: [u8; 256] = [
    0x63, 0x52, 0x1a, 0xdf, 0x8a, 0xf6, 0xae, 0x55, 0x89, 0xe7, 0xd0, 0x2d, 0xbd, 0x01, 0x24, 0x78,
    0x1b, 0xd9, 0xe3, 0x54, 0xc8, 0xa4, 0xec, 0x7e, 0xab, 0x00, 0x9c, 0x2e, 0x91, 0x67, 0x37, 0x53,
    0x4e, 0x6b, 0x6c, 0x11, 0xb2, 0xc0, 0x82, 0xfd, 0x39, 0x45, 0xfe, 0x9b, 0x34, 0xd7, 0xa7, 0x08,
    0xb8, 0x9a, 0x33, 0xc6, 0x4c, 0x1d, 0x69, 0xa1, 0x6e, 0x3e, 0xc5, 0x0a, 0x57, 0xf4, 0xf1, 0x83,
    0xf5, 0x47, 0x1f, 0x7a, 0xa5, 0x29, 0x3c, 0x42, 0xd6, 0x73, 0x8d, 0xf0, 0x8e, 0x18, 0xaa, 0xc1,
    0x20, 0xbf, 0xe6, 0x93, 0x51, 0x0e, 0xf7, 0x98, 0xdd, 0xba, 0x6a, 0x05, 0x48, 0x23, 0x6d, 0xd4,
    0x1e, 0x60, 0x75, 0x43, 0x97, 0x2a, 0x31, 0xdb, 0x84, 0x19, 0xaf, 0xbc, 0xcc, 0xf3, 0xe8, 0x46,
    0x88, 0xac, 0x8b, 0xe4, 0x7b, 0xd5, 0x58, 0x36, 0x02, 0xb1, 0x07, 0x72, 0xe1, 0xdc, 0x5f, 0x2f,
    0x5d, 0xe5, 0xd1, 0x0c, 0x26, 0x99, 0xb5, 0x6f, 0xe0, 0x4a, 0x3b, 0xde, 0xa2, 0x68, 0x92, 0x17,
    0xca, 0xee, 0xa9, 0xb6, 0x03, 0x5e, 0xd3, 0x25, 0xfb, 0x9d, 0x61, 0x59, 0x06, 0x90, 0x74, 0x2c,
    0x27, 0x95, 0xa0, 0xb9, 0x7c, 0xed, 0x04, 0xd2, 0x50, 0xe2, 0x49, 0x77, 0xcb, 0x3a, 0x0f, 0x9e,
    0x70, 0x16, 0x5c, 0xef, 0x21, 0xb3, 0x9f, 0x0d, 0xa6, 0xc9, 0x22, 0x94, 0xfa, 0x4b, 0xd8, 0x65,
    0x85, 0x3d, 0x96, 0x28, 0x14, 0x5b, 0x66, 0xea, 0x7f, 0xce, 0xf9, 0x40, 0x13, 0xad, 0xc3, 0xb0,
    0xf2, 0xc2, 0x38, 0x80, 0xcf, 0x71, 0x0b, 0x87, 0x4d, 0x35, 0x56, 0xe9, 0x64, 0xbe, 0x1c, 0xbb,
    0xb7, 0x30, 0xc4, 0x2b, 0xff, 0x62, 0x41, 0xa8, 0x15, 0x8c, 0x12, 0xc7, 0x79, 0x8f, 0x5a, 0xfc,
    0xcd, 0x09, 0x4f, 0x7d, 0xf8, 0x86, 0xda, 0x10, 0x32, 0x76, 0xb4, 0xa3, 0x3f, 0x44, 0x81, 0xeb,
];
